package com.fourdworks.handweather.fragment;import java.util.ArrayList;import java.util.List;import org.json.JSONException;import org.json.JSONObject;import android.text.TextUtils;import android.view.View;import android.widget.AdapterView;import android.widget.Button;import android.widget.AdapterView.OnItemClickListener;import android.widget.ListView;import com.fourdworks.handweather.R;import com.fourdworks.handweather.activity.WebActivity;import com.fourdworks.handweather.adapter.NewsAdapter;import com.fourdworks.handweather.beans.New;import com.fourdworks.handweather.global.CostantValue;import com.fourdworks.handweather.http.HttpFactory;import com.fourdworks.handweather.http.ServiceResponce;import com.fourdworks.handweather.utils.LogUtils;import com.fourdworks.handweather.utils.MathUtils;import com.fourdworks.handweather.view.LoadMoreButton;import com.fourdworks.handweather.view.LoadMoreButton.OnLoadMoreClickListener;import com.fourdworks.handweather.view.SlideShowView;//查看更多//-------------------------//一。查看更多有什么效果以及条件//1.当首次进入页面时候，会自动回获取一页新闻，在获取过程中显示加载动画//2.当新闻获取完了，服务器没有更多新闻，隐藏查看更多//3.当正在加载数据，需要显示加载更多的旋转动画//4.当一页数据加载完毕，但是服务器还有数据，显示加载更多，单击之后可以加载下一页//查看更多自定义组件的设计//-------------------------//1.界面//2.方法//  ------------------//    隐藏查看更多//    显示查看更多//    显示加载更多动画       //    显示加载更多 //    查看更多按钮注册单击监听器        /** * 功能:主页面----新闻碎片 作者:mike 时间：2015-10-22 上午8:53:06 修改: */public class NewsFragement extends BaseFragement implements ServiceResponce {	private String TAG = "NewsFragement";	// 轮播	private SlideShowView mSlideShowView;	private List<String> newsImgUrls;// 轮播视图图片地址的集合	private int newsNum = 20, page = 2;// 一页返回20条新闻(20~39)	// 新闻列表相关	private ListView listViewNews;	private List<New> listNews;// 新闻列表的集合	private NewsAdapter newsAdapter;// 新闻列表适配器	private int newsListNum = 10, newListpage = 1;// 分页	private int inFactNum = newsListNum - 1;// 每一页实际返回的新闻条数	// 加载更多相关	private LoadMoreButton loadMoreButton;	public NewsFragement() {		super(R.layout.frag_news);		// TODO Auto-generated constructor stub	}	@Override	protected void initView() {		// TODO Auto-generated method stub		// 初始化控件		mSlideShowView = findViewWithId(R.id.news_slideshow);// 轮播视图		listViewNews = findViewWithId(R.id.newsList);// 新闻列表视图		loadMoreButton = new LoadMoreButton(c);// 加载更多按钮	}	@Override	protected void initData() {		// TODO Auto-generated method stub		newsImgUrls = new ArrayList<String>();		listNews = new ArrayList<New>();// 新闻列表的集合		newsAdapter = new NewsAdapter(c, listNews);// 新闻列表适配器	}	@Override	protected void bindView() {		// TODO Auto-generated method stub		// 为新闻列表视图设置适配器		listViewNews.setAdapter(newsAdapter);		// 为ListView设置加载更多底部视图		listViewNews.addFooterView(loadMoreButton);		// 为加载更多按钮注册单击监听器		loadMoreButton				.setOnLoadMoreClickListener(new OnLoadMoreClickListener() {					@Override					public void onLoadMoreClick(Button btn) {						// 加载下一页数据						newListpage++;						// 调用接口						HttpFactory.searchNewsTJ(NewsFragement.this,								newsListNum, newListpage, 2);					}				});		// 获取推荐新闻		HttpFactory.searchNewsTJ(this, newsNum, page, 1);		HttpFactory.searchNewsTJ(this, newsListNum, newListpage, 2);		// 为新闻列表视图注册单击监听器		listViewNews.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> parent, View view,					int position, long id) {				// 启动WebActivity页面，并且传递当前列表项新闻模型				getAttachAct().jumpToActivity(WebActivity.class,						listNews.get(position));				LogUtils.d(TAG, listNews.get(position).toString());			}		});	}	/**	 * 服务器返回数据成功	 */	@Override	public void httpSuccess(String result, int responseFlag) {		try {			// 1.将json字符串转化为对象			JSONObject back = new JSONObject(result);			// 2.判断服务器返回数据是否正确			int code = back.getInt("code");// 获取返回码			String msg = back.getString("msg");// 获取返回描述			if (code == CostantValue.SERVER_BACK_OK) {// 正常				// 3.解析新闻保存集合中				List<New> temp = new ArrayList<New>();				// 确认当前新闻条数				int number = 0;				if (responseFlag == 1) {					number = newsNum;				} else if (responseFlag == 2) {					number = newsListNum;				}				for (int i = 0; i < number; i++) {					// 获取键值为i所对应的json的对象					JSONObject jb = null;					// 防止没有获取到json对象					try {						jb = back.getJSONObject(i + "");// 抛异常					} catch (JSONException e) {						// TODO: handle exception						LogUtils.d(TAG, "通过键值获取json对象异常");						continue;					}					// if (jb == null) {					// continue;					// }					// 获取json中的字段					String time = jb.getString("time");					String title = jb.getString("title");					String description = jb.getString("description");					String picUrl = jb.getString("picUrl");					String url = jb.getString("url");					// 创建新闻模型对象					New newsTJ = new New(time, title, description, picUrl, url);					// 将新闻模型保存到集合					temp.add(newsTJ);				}				if (responseFlag == 1) {// 新闻推荐（广告）					// 1.随机新闻的个数n					int newsNumber = MathUtils.getRandomBetweenRange(3, 5);					// 2.从服务器返回新闻集合中找到带新闻图片地址的新闻,n条新闻,能找几个找几个					newsImgUrls.clear();					for (New newsTJ : temp) {						if (!TextUtils.isEmpty(newsTJ.getPicUrl())) {							newsImgUrls.add(newsTJ.getPicUrl());						}						if (newsImgUrls.size() >= newsNumber) {							break;						}					}					// 3.将图片地址集合设置到新闻轮播视图中					mSlideShowView.setImageUris(newsImgUrls);				} else if (responseFlag == 2) {// 新闻列表					// 服务器是否还有数据					// true:					// 1.将当前页的新闻集合保存到总新闻集合中					// 2.更新适配器					// 3.一页加载完毕，加载更多按钮执行一页加载完毕动画					// false:					// 1.将当前页的新闻集合保存到总新闻集合中					// 2.更新适配器					// 3.服务器数据加载完毕，隐藏加载更多按钮					// ---------------------------					// 将当前页的新闻集合保存到总新闻集合中					listNews.addAll(temp);					// 更新适配器					newsAdapter.notifyDataSetChanged();										if (newListpage == 4) {						loadMoreButton.hideSelf(listViewNews);					} else {						// 服务器是否还有数据						if (temp.size() < inFactNum) {// 服务器数据被获取完毕							// 3.服务器数据加载完毕，隐藏加载更多按钮							loadMoreButton.hideSelf(listViewNews);						} else {// 服务器可能还有下一页数据								// 3.一页加载完毕，加载更多按钮执行一页加载完毕动画							loadMoreButton.finishLoading();						}					}				}			} else {				getAttachAct().showMessage(msg);// 出错原因			}		} catch (JSONException e) {			e.printStackTrace();			LogUtils.d(TAG, "新闻推荐json格式error");			getAttachAct().showMessage(getString(R.string.server_error));		}		// 2.从对象中获取图片地址集合		// 3.为轮播视图设置图片地址集合	}	/**	 *  	 */	@Override	public void httpTimeOut(int responseFlag) {		getAttachAct().showMessage("httpTimeOut");	}	/**	 * 服务器出错	 */	@Override	public void httpError(int responseFlag) {		getAttachAct().showMessage("httpError");	}}