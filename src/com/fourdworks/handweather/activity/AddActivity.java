package com.fourdworks.handweather.activity;import java.util.ArrayList;import java.util.List;import android.content.Intent;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.GridView;import android.widget.ImageButton;import android.widget.ListView;import android.widget.Toast;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.location.LocationClient;import com.baidu.location.LocationClientOption;import com.baidu.location.LocationClientOption.LocationMode;import com.fourdworks.handweather.R;import com.fourdworks.handweather.adapter.HotCityAdapter;import com.fourdworks.handweather.beans.City;import com.fourdworks.handweather.beans.UserCity;import com.fourdworks.handweather.db.AllCityDao;import com.fourdworks.handweather.db.HandWeatherDAO;import com.fourdworks.handweather.global.CostantValue;import com.fourdworks.handweather.global.VariableValue;import com.fourdworks.handweather.utils.LogUtils;import com.fourdworks.handweather.view.TitleBar;//将代码抽取出来作为方法：alt+shift+m//1.搜索城市//功能1.1：为搜索编辑文本框注册文字变化监听器//    true://    1.显示删除图标//    2.显示搜索页面//    3.隐藏热门城市页面//    4.根据条件查询所有满足条件的城市//    5.更新适配器（有适配器）//    6.如果是没有搜索到匹配城市，显示空视图//    false:	//    1.隐藏删除图标  	//    2.隐藏搜索页面	//    3.显示热门城市页面// 功能1.2：删除按钮的单击事件//    1.情况搜索编辑文本框的内容//2.添加城市到用户城市表//---------------------------------//  为ListView和GridView注册列表项单击监听器  //  ---//  0.当前是否单机了定位//	  true:定位-------------//	  false:下一步//  1.用户城市表中的城市是否对于7个//    true:提示“对不起！常用城市不能多于7个”//    false:下一步	   //  2.判断该城市是否已经存在//	  true:提示“对不起！XXX已经存在”// 	  false:下一步	   //  3.将该城市添加到用户表中去//  4.自动跳转到首页面//  5.修改当前选中城市为该城市//  6.广播通知当前选中城市已经改变//  7.更新适配器//  8.设置当前城市为选中城市//3.百度定位//3.1百度定位使用步骤---------------------//   1.需要先申请且配置Key   //   sha1:   14:99:F8:CC:EA:C8:04:03:4E:29:13:78:62:F0:2C:DF:68:46:26:2D//    //----//    key:0DAmzYZ3inQnaCZU3TU5NcMU  //   2.导入库文件//   3.配置定位的服务//   4.配置权限文件//   5.设置AcessKey//	 6.嵌入代码//   --------------//第一步，初始化LocationClient类//第二步，配置定位SDK参数//第三步，实现BDLocationListener接口//第四步，发起定位// 3.2定位的单击事件//--------------------------------// 1.发起定位//3.3 定位成功之后//--------------------------------// 1.获取定位城市// 2.同“城市的单击事件”一样import com.fourdworks.handweather.view.TitleBar.OnLeftIconClickListener;/** * 功能:添加城市 作者:mike 时间：2015-11-2 上午9:23:33 修改: */public class AddActivity extends BaseActivity {	private String TAG = "AddActivity";	// 标题	private TitleBar title;	// 热门城市--->GridView	private GridView hotCityGV;	private HotCityAdapter hotCityAdapter;	// 搜索模块	private EditText searchBox;// 搜索编辑文本框	private ImageButton clearSearchText;// 删除图标	private ListView searchResult;// 搜索结果	private ArrayAdapter<String> searchResultAda;// 搜索结果适配器	private List<String> searchCitys;// 搜索的城市集合	// 关于软键盘	InputMethodManager softKeybord;// 声明软键盘管理器	// 热门城市和搜索城市城市的两个视图	private View hotCityContainer, searchResultContainer;	// 城市选中监听器	private OnItemClickListener chooseCityListener = new OnItemClickListener() {		@Override		public void onItemClick(AdapterView<?> parent, View view, int position,				long id) {			String cityName = "";// 城市名字			if (parent instanceof GridView) {				// LogUtils.d(TAG, "GridView");				// 0.当前是否单机了定位				// true:定位-------------				// false:下一步				// 1.用户城市表中的城市是否对于7个				// true:提示“对不起！常用城市不能多于7个”				// false:下一步				// 2.判断该城市是否已经存在				// true:提示“对不起！XXX已经存在”				// false:下一步				// 3.将该城市添加到用户表中去				// 4.自动跳转到首页面				// 5.修改当前选中城市为该城市				// 6.广播通知当前选中城市已经改变				// 0.当前是否单机了定位				if (position == 0) {// 定位					// true:定位-------------					// showMessage("敬请期待！");					// 弹出定位加载对话框					showDialog("正在定位", false);					// 启动百度定位					startBdLocation();					return;				} else {// 非定位						// false:下一步						// 城市名字					cityName = CostantValue.hotCitys[position];				}			} else {				// LogUtils.d(TAG, "ListView");				cityName = searchCitys.get(position).split("\t")[1];			}			// 响应城市的单击事件(把城市添加到用户城市表中......)			responseCityClick(cityName);		}	};	public AddActivity() {		super(R.layout.activity_addcity);		// TODO Auto-generated constructor stub	}	@Override	protected void initView() {		// TODO Auto-generated method stub		// 初始化标题		title = (TitleBar) findViewById(R.id.titlebar);		// 热门城市--->GridView		hotCityGV = (GridView) findViewById(R.id.hotcity);		// 搜索功能		searchBox = (EditText) findViewById(R.id.seach_box);// 搜索编辑文本框		clearSearchText = (ImageButton) findViewById(R.id.claear_search);// 删除图标		searchResult = (ListView) findViewById(R.id.search_result);// 搜索结果		// 热门城市和搜索城市城市的两个视图		hotCityContainer = findViewById(R.id.hotcity_container);		searchResultContainer = findViewById(R.id.seach_container);		// 初始化软键盘		softKeybord = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);		// 默认隐藏软键盘		// 软键盘.隐藏软键盘(令牌，标记)		softKeybord.hideSoftInputFromWindow(searchBox.getWindowToken(),				InputMethodManager.HIDE_NOT_ALWAYS);	}	@Override	protected void initData() {		// TODO Auto-generated method stub		// 热门城市--->GridView		hotCityAdapter = new HotCityAdapter(c);	}	/**	 * 启动百度定位	 */	private void startBdLocation() {		// 定位相关		// 第一步，初始化LocationClient类		LocationClient mLocationClient = new LocationClient(				getApplicationContext());		// 第二步，配置定位SDK参数		initLocation(mLocationClient);		// 第三步，实现BDLocationListener接口		MyBDLocationListener bdLocationListener = new MyBDLocationListener();		mLocationClient.registerLocationListener(bdLocationListener);		// 第四步，发起定位		mLocationClient.start();	}	@Override	protected void bindView() {		// TODO Auto-generated method stub		// -----标题相关设置		title.setLeftIcon(R.drawable.base_action_bar_back_normal);// 修改左图标		title.settitle("添加城市");// 设置标题		// ----- 热门城市--->GridView		hotCityGV.setAdapter(hotCityAdapter);		// ----搜索功能		// 初始化搜索结果的适配器		searchCitys = new ArrayList<String>();		searchResultAda = new ArrayAdapter<String>(this, R.layout.item_city,				searchCitys);		searchResult.setAdapter(searchResultAda);// 设置适配器		// 为搜索编辑文本框注册文字变化监听器		searchBox.addTextChangedListener(new TextWatcher() {			/**			 * 文字变化过程中			 */			@Override			public void onTextChanged(CharSequence s, int start, int before,					int count) {				// TODO Auto-generated method stub				// LogUtils.d(TAG, "onTextChanged:" + s + "--" + start + "---"				// + before + "---" + count);				// true:				// 1.显示删除图标				// 2.显示搜索页面				// 3.隐藏热门城市页面				// 4.根据条件查询所有满足条件的城市				// 5.更新适配器（有适配器）				// false:				// 1.隐藏删除图标				// 2.隐藏搜索页面				// 3.显示热门城市页面				if (TextUtils.isEmpty(s)) {// false:					// 1.隐藏删除图标					clearSearchText.setVisibility(View.GONE);					// 2.隐藏搜索页面					searchResultContainer.setVisibility(View.GONE);					// 3.显示热门城市页面					hotCityContainer.setVisibility(View.VISIBLE);				} else {// true:						// 1.显示删除图标					clearSearchText.setVisibility(View.VISIBLE);					// 2.显示搜索页面					searchResultContainer.setVisibility(View.VISIBLE);					// 3.隐藏热门城市页面					hotCityContainer.setVisibility(View.GONE);					// 4.根据条件查询所有满足条件的城市					List<City> listCities = AllCityDao.getInstance()							.searchCity(s.toString());					// 5.List<City>---->List<String>(String:省和市的拼接)					// 情况上一次的搜索结果					searchCitys.clear();					for (City city : listCities) {						String pc = city.getProvince() + "\t" + city.getCity();						searchCitys.add(pc);					}					// 5.更新适配器（有适配器）----					searchResultAda.notifyDataSetChanged();					// LogUtils.d(TAG, listCities.toString());					// 默认显示第0条					searchResult.setSelection(0);				}			}			/**			 * 文字变化之前			 */			@Override			public void beforeTextChanged(CharSequence s, int start, int count,					int after) {				// TODO Auto-generated method stub				// LogUtils.d(TAG, "beforeTextChanged:" + s + "--" + start +				// "---"				// + count+"---"+after);			}			/**			 * 文字变化之后			 */			@Override			public void afterTextChanged(Editable s) {				// TODO Auto-generated method stub				// LogUtils.d(TAG, "afterTextChanged:" + s);			}		});		// 6.如果是没有搜索到匹配城市，显示空视图		searchResult.setEmptyView(findViewById(R.id.empty_view));		// 功能1.2：删除按钮的单击事件		// 删除图标		clearSearchText.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				// TODO Auto-generated method stub				// 1.清空搜索编辑文本框的内容				searchBox.setText("");				// 2.隐藏输入法				// 软键盘.隐藏软键盘(令牌，标记)				softKeybord.hideSoftInputFromWindow(searchBox.getWindowToken(),						InputMethodManager.HIDE_NOT_ALWAYS);			}		});		// 2.添加城市到用户城市表		// ---------------------------------		// 为ListView和GridView注册列表项单击监听器		hotCityGV.setOnItemClickListener(chooseCityListener);		searchResult.setOnItemClickListener(chooseCityListener);		// 3.为返回按钮注册单击事件		title.setOnLeftIconClickListener(new OnLeftIconClickListener() {			@Override			public void onLeftIconClick(ImageButton v) {				back();			}		});	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {// 截获返回按键的单击事件			back();		}		return true;	}	/**	 * 返回事件	 */	private void back() {		// 如果当前用户城市表中有城市，才能返回上一个界面		if (HandWeatherDAO.getInstance().getUserCitySize() > 0) {			finish();		} else {			showMessage("请务必选择一个城市！");		}	}	/**	 * 配置定位参数	 */	private void initLocation(LocationClient mLocationClient) {		// 初始化定位参数对象		LocationClientOption option = new LocationClientOption();		// 设置定位参数		option.setLocationMode(LocationMode.Hight_Accuracy);// 可选，默认高精度，设置定位模式，高精度，低功耗，仅设备		option.setCoorType("bd09ll");// 可选，默认gcj02，设置返回的定位结果坐标系		// int span = 1000;		// option.setScanSpan(span);//		// 可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的		option.setIsNeedAddress(true);// 可选，设置是否需要地址信息，默认不需要		option.setOpenGps(true);// 可选，默认false,设置是否使用gps		option.setLocationNotify(true);// 可选，默认false，设置是否当gps有效时按照1S1次频率输出GPS结果		option.setIsNeedLocationDescribe(true);// 可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”		option.setIsNeedLocationPoiList(true);// 可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到		option.setIgnoreKillProcess(false);// 可选，默认false，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认杀死		option.SetIgnoreCacheException(false);// 可选，默认false，设置是否收集CRASH信息，默认收集		option.setEnableSimulateGps(false);// 可选，默认false，设置是否需要过滤gps仿真结果，默认需要		// 定位参数---->定位客户端		mLocationClient.setLocOption(option);	}	// 第三步，实现BDLocationListener接口	/**	 * 功能:实现BDLocationListener接口 作者:mike 时间：2015-11-5 上午9:22:47 修改:	 */	public class MyBDLocationListener implements BDLocationListener {		/**		 * 接收异步返回的定位结果，参数是BDLocation类型参数。		 * 		 * @param bdLocation		 *            定位参数（封装了本次定位的定位信息）		 */		@Override		public void onReceiveLocation(BDLocation bdLocation) {			// TODO Auto-generated method stub			// // 测试定位结果的相关信息			// double 经度 = bdLocation.getLongitude();			// double 纬度 = bdLocation.getLatitude();			//			// String 省 = bdLocation.getProvince();			// String 市 = bdLocation.getCity();			// String 区_县 = bdLocation.getDistrict();			// String 获取街道信息 = bdLocation.getStreet();			// String 获取街道号码 = bdLocation.getStreetNumber();			//			// LogUtils.d(TAG, "经纬度：" + "(" + 经度 + "," + 纬度 + ")");			// LogUtils.d(TAG, 省 + "\t" + 市 + "\t" + 区_县 + "\t" + 获取街道信息 + "\t"			// + 获取街道号码);			dismissDialog();			// 获取城市			String cityName = bdLocation.getCity();			// 响应城市的单击事件(把城市添加到用户城市表中......)			responseCityClick(cityName);		}	}	/**	 * 响应城市的单击事件	 * 	 * @param cityName	 *            城市名字	 */	private void responseCityClick(String cityName) {		// 1.用户城市表中的城市是否对于7个		if (HandWeatherDAO.getInstance().getUserCitySize() >= CostantValue.USERCITY_MAX_NUM) {			// true:提示“对不起！常用城市不能多于7个”			showMessage("对不起！常用城市不能多于7个");			return;		}		// false:下一步		// 2.判断该城市是否已经存在		if (HandWeatherDAO.getInstance().isCityExists(cityName)) {			// true:提示“对不起！XXX已经存在”			showMessage("对不起！" + cityName + "已经存在");			return;		}		// false:下一步		// 3.将该城市添加到用户表中去		if (!cityName.contains("市")) {			cityName = cityName + "市";		}		UserCity userCity = new UserCity(cityName);		HandWeatherDAO.getInstance().addUserCity(userCity);		// *****************************************		// 清空搜索框的文字（目的：防止市搜索选中的城市）		searchBox.setText("");		// *****************************************		// 4.自动跳转到首页面		// finish();		// 5.修改当前选中城市为该城市		// VariableValue.currentCity = userCity;		// 6.广播通知当前选中城市已经改变		Intent intent = new Intent(CostantValue.USERCITYCHANGED_ACTION);		sendBroadcast(intent);		// 7. 更新适配器		hotCityAdapter.notifyDataSetChanged();		// 8.设置当前城市为选中城市		HandWeatherDAO.getInstance().setCurrentCity(cityName);		// 显示当前用户表中有哪些城市		LogUtils.d(TAG, HandWeatherDAO.getInstance().getAllUserCities()				.toString());		// 自动跳转到中间页面		finish();	}}